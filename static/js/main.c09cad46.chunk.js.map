{"version":3,"sources":["components/SearchBar.js","components/Book.js","components/Books.js","components/App.js","serviceWorker.js","index.js","assets/cancel.svg","assets/loading.svg"],"names":["SearchBar","_ref","searchTerm","onInputChange","onCancelButton","onSearchClicked","react_default","a","createElement","className","type","placeholder","value","onChange","onClick","src","Cancel","alt","Book","book","imageLinkText","volumeInfo","imageLinks","smallThumbnail","title","authors","publisher","href","infoLink","target","rel","Books","books","map","components_Book","key","id","App","state","error","loading","handleInputChange","e","_this","setState","toLowerCase","handleSearch","searchInput","length","fetch","concat","then","response","json","data","totalItems","items","catch","err","console","log","_this2","this","components_SearchBar","Loading","style","color","components_Books","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wPAkCeA,EA9BG,SAAAC,GAKZ,IAJJC,EAIID,EAJJC,WACAC,EAGIF,EAHJE,cACAC,EAEIH,EAFJG,eACAC,EACIJ,EADJI,gBAEA,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,SACEE,KAAK,OACLC,YAAY,iCACZC,MAAOV,EACPW,SAAUV,IAEI,KAAfD,EACCI,EAAAC,EAAAC,cAAA,QAAMM,QAASV,GACbE,EAAAC,EAAAC,cAAA,OAAKO,IAAKC,IAAQC,IAAI,YAEtB,KACJX,EAAAC,EAAAC,cAAA,UAAQM,QAAST,GAAjB,YCSSa,EA7BF,SAAAjB,GAAc,IAAXkB,EAAWlB,EAAXkB,KACRC,EAAgBD,EAAKE,WAAWC,WAClCH,EAAKE,WAAWC,WAAWC,eAC3B,wGACJ,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKO,IAAKK,EAAeH,IAAKE,EAAKE,WAAWG,SAEhDlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UAAKW,EAAKE,WAAWG,OACrBlB,EAAAC,EAAAC,cAAA,gBAAQW,EAAKE,WAAWI,SACxBnB,EAAAC,EAAAC,cAAA,0BAAkBW,EAAKE,WAAWK,WAClCpB,EAAAC,EAAAC,cAAA,KACEmB,KAAMR,EAAKE,WAAWO,SACtBC,OAAO,SACPC,IAAI,uBAHN,oBCEOC,EAdD,SAAA9B,GAAe,IAAZ+B,EAAY/B,EAAZ+B,MACf,OACE1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZuB,EAAMC,IAAI,SAAAd,GAAI,OACbb,EAAAC,EAAAC,cAAC0B,EAAD,CAAMC,IAAKhB,EAAKiB,GAAIjB,KAAMA,wBC4EnBkB,6MA9EbC,MAAQ,CACNN,MAAO,GACP9B,WAAY,GACZqC,OAAO,EACPC,SAAS,KAGXC,kBAAoB,SAAAC,GAClBC,EAAKC,SAAS,CACZ1C,WAAYwC,EAAEb,OAAOjB,MAAMiC,mBAI/BC,aAAe,WACb,IAAMC,EAAcJ,EAAKL,MAAMpC,WAC3B6C,EAAYC,OAAS,GACvBL,EAAKC,SAAS,CAAEJ,SAAS,EAAMD,OAAO,IACtCU,MAAK,iDAAAC,OAC8CH,EAD9C,+DAGFI,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACAA,EAAKC,WAAa,EACpBZ,EAAKC,SAAS,CACZZ,MAAOsB,EAAKE,MACZhB,SAAS,IAGXG,EAAKC,SAAS,CACZZ,MAAO,GACPQ,SAAS,MAIdiB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAI,QAASF,MAErCf,EAAKC,SAAS,CACZL,OAAO,6EAKJ,IAAAsB,EAAAC,KACP,OACExD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAACuD,EAAD,CACE7D,WAAY4D,KAAKxB,MAAMpC,WACvBC,cAAe2D,KAAKrB,kBACpBrC,eAAgB,kBAAMyD,EAAKjB,SAAS,CAAE1C,WAAY,GAAI8B,MAAO,MAC7D3B,gBAAiByD,KAAKhB,eAGvBgB,KAAKxB,MAAME,SACVlC,EAAAC,EAAAC,cAAA,OAAKO,IAAKiD,IAAS/C,IAAI,UAAUR,UAAU,YAG5CqD,KAAKxB,MAAMC,OACVjC,EAAAC,EAAAC,cAAA,KAAGyD,MAAO,CAAEC,MAAO,QACjB5D,EAAAC,EAAAC,cAAA,yBADF,wCAKyB,KAA1BsD,KAAKxB,MAAMpC,YACVI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,uDAIDqD,KAAKxB,MAAMN,MAAMgB,OAAS,GAA+B,KAA1Bc,KAAKxB,MAAMpC,WACzCI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,mCAEAH,EAAAC,EAAAC,cAAC2D,EAAD,CAAOnC,MAAO8B,KAAKxB,MAAMN,gBAxEjBoC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.c09cad46.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Cancel from \"../assets/cancel.svg\";\n\nconst SearchBar = ({\n  searchTerm,\n  onInputChange,\n  onCancelButton,\n  onSearchClicked\n}) => {\n  return (\n    <div className=\"search\">\n      <input\n        type=\"text\"\n        placeholder=\"Search by book title or author\"\n        value={searchTerm}\n        onChange={onInputChange}\n      />\n      {searchTerm !== \"\" ? (\n        <span onClick={onCancelButton}>\n          <img src={Cancel} alt=\"cancel\" />\n        </span>\n      ) : null}\n      <button onClick={onSearchClicked}>Search</button>\n    </div>\n  );\n};\n\nSearchBar.propTypes = {\n  searchTerm: PropTypes.string.isRequired,\n  onInputChange: PropTypes.func.isRequired,\n  onCancelButton: PropTypes.func.isRequired\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Book = ({ book }) => {\n  const imageLinkText = book.volumeInfo.imageLinks\n    ? book.volumeInfo.imageLinks.smallThumbnail\n    : \"http://books.google.com/books/content?id=weziqmesADQC&printsec=frontcover&img=1&zoom=1&source=gbs_api\";\n  return (\n    <div className=\"book\">\n      <div className=\"img\">\n        <img src={imageLinkText} alt={book.volumeInfo.title} />\n      </div>\n      <div className=\"info\">\n        <h3>{book.volumeInfo.title}</h3>\n        <p>By: {book.volumeInfo.authors}</p>\n        <p>Published by: {book.volumeInfo.publisher}</p>\n        <a\n          href={book.volumeInfo.infoLink}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          See this book\n        </a>\n      </div>\n    </div>\n  );\n};\n\nBook.propTypes = {\n  book: PropTypes.object.isRequired\n};\n\nexport default Book;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Book from \"./Book\";\n\nconst Books = ({ books }) => {\n  return (\n    <div className=\"books\">\n      {books.map(book => (\n        <Book key={book.id} book={book} />\n      ))}\n    </div>\n  );\n};\n\nBooks.propTypes = {\n  books: PropTypes.array.isRequired\n};\n\nexport default Books;\n","import React, { Component } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport Books from \"./Books\";\nimport Loading from \"../assets/loading.svg\";\n\nclass App extends Component {\n  state = {\n    books: [],\n    searchTerm: \"\",\n    error: false,\n    loading: false\n  };\n\n  handleInputChange = e => {\n    this.setState({\n      searchTerm: e.target.value.toLowerCase()\n    });\n  };\n\n  handleSearch = () => {\n    const searchInput = this.state.searchTerm;\n    if (searchInput.length > 0) {\n      this.setState({ loading: true, error: false });\n      fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=${searchInput}&key=AIzaSyBHvufh7ugN1VnK9j5vqROgskKR8FCNSFM&maxResults=30`\n      )\n        .then(response => response.json())\n        .then(data => {\n          if (data.totalItems > 0) {\n            this.setState({\n              books: data.items,\n              loading: false\n            });\n          } else {\n            this.setState({\n              books: [],\n              loading: false\n            });\n          }\n        })\n        .catch(err => console.log(\"error\", err));\n    } else {\n      this.setState({\n        error: true\n      });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <h2>Book Finder</h2>\n        <SearchBar\n          searchTerm={this.state.searchTerm}\n          onInputChange={this.handleInputChange}\n          onCancelButton={() => this.setState({ searchTerm: \"\", books: [] })}\n          onSearchClicked={this.handleSearch}\n        />\n\n        {this.state.loading && (\n          <img src={Loading} alt=\"loading\" className=\"loading\" />\n        )}\n\n        {this.state.error && (\n          <p style={{ color: \"red\" }}>\n            <strong>Error! </strong> Please provide a search query first\n          </p>\n        )}\n\n        {this.state.searchTerm === \"\" && (\n          <div className=\"no-content\">\n            ☹ Nothing here yet - try searching for a book!\n          </div>\n        )}\n        {this.state.books.length < 1 && this.state.searchTerm !== \"\" ? (\n          <div className=\"no-content\">☹ Sorry, no book no found!</div>\n        ) : (\n          <Books books={this.state.books} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cancel.e85191c6.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.b78dc987.svg\";"],"sourceRoot":""}